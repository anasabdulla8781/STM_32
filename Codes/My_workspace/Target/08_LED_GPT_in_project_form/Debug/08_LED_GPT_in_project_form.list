
08_LED_GPT_in_project_form.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00001458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000450  08000450  00001458  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001458  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006e6  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ec  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00001e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000077  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012d1  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013f0  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004415  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00008a6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000015c  00000000  00000000  00008ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000438 	.word	0x08000438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000438 	.word	0x08000438

080001c8 <service_init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void service_init()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	timer2_init(CLK_FREQEUNCY);
 80001cc:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 80001d0:	f000 f8ae 	bl	8000330 <timer2_init>
	rcc_init();					/// initializing the clock for necessory components
 80001d4:	f000 f8c4 	bl	8000360 <rcc_init>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}

080001dc <app_init>:

void app_init()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	led_init(GREEN_LED_PIN);
 80001e0:	200c      	movs	r0, #12
 80001e2:	f000 f849 	bl	8000278 <led_init>
	led_init(BLUE_LED_PIN);
 80001e6:	200f      	movs	r0, #15
 80001e8:	f000 f846 	bl	8000278 <led_init>
	led_init(RED_LED_PIN);
 80001ec:	200e      	movs	r0, #14
 80001ee:	f000 f843 	bl	8000278 <led_init>
	led_init(ORANGE_LED_PIN);
 80001f2:	200d      	movs	r0, #13
 80001f4:	f000 f840 	bl	8000278 <led_init>
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}

080001fc <main>:

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	service_init();
 8000202:	f7ff ffe1 	bl	80001c8 <service_init>
	app_init();
 8000206:	f7ff ffe9 	bl	80001dc <app_init>

	while (1)
	{
		for (uint32_t i = 0 ; i<50000 ; i++)
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e012      	b.n	8000236 <main+0x3a>
		{
			led_operations(GREEN_LED_PIN, ON);
 8000210:	2101      	movs	r1, #1
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f854 	bl	80002c0 <led_operations>
			led_operations(BLUE_LED_PIN, ON);
 8000218:	2101      	movs	r1, #1
 800021a:	200f      	movs	r0, #15
 800021c:	f000 f850 	bl	80002c0 <led_operations>
			led_operations(ORANGE_LED_PIN, OFF);
 8000220:	2100      	movs	r1, #0
 8000222:	200d      	movs	r0, #13
 8000224:	f000 f84c 	bl	80002c0 <led_operations>
			led_operations(RED_LED_PIN, OFF);
 8000228:	2100      	movs	r1, #0
 800022a:	200e      	movs	r0, #14
 800022c:	f000 f848 	bl	80002c0 <led_operations>
		for (uint32_t i = 0 ; i<50000 ; i++)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3301      	adds	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800023c:	4293      	cmp	r3, r2
 800023e:	d9e7      	bls.n	8000210 <main+0x14>
		}
		for (uint32_t i = 0 ; i<50000 ; i++)
 8000240:	2300      	movs	r3, #0
 8000242:	603b      	str	r3, [r7, #0]
 8000244:	e012      	b.n	800026c <main+0x70>
		{
			led_operations(GREEN_LED_PIN, OFF);
 8000246:	2100      	movs	r1, #0
 8000248:	200c      	movs	r0, #12
 800024a:	f000 f839 	bl	80002c0 <led_operations>
			led_operations(BLUE_LED_PIN, OFF);
 800024e:	2100      	movs	r1, #0
 8000250:	200f      	movs	r0, #15
 8000252:	f000 f835 	bl	80002c0 <led_operations>
			led_operations(ORANGE_LED_PIN, ON);
 8000256:	2101      	movs	r1, #1
 8000258:	200d      	movs	r0, #13
 800025a:	f000 f831 	bl	80002c0 <led_operations>
			led_operations(RED_LED_PIN, ON);
 800025e:	2101      	movs	r1, #1
 8000260:	200e      	movs	r0, #14
 8000262:	f000 f82d 	bl	80002c0 <led_operations>
		for (uint32_t i = 0 ; i<50000 ; i++)
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000272:	4293      	cmp	r3, r2
 8000274:	d9e7      	bls.n	8000246 <main+0x4a>
		for (uint32_t i = 0 ; i<50000 ; i++)
 8000276:	e7c8      	b.n	800020a <main+0xe>

08000278 <led_init>:
#include <STM32_GPIO.h>



void led_init(uint8_t pin)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	gpiod_ptr->MODER &= ~(0X03<<(pin*2));		/// clearing the mode bits for the LED
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <led_init+0x44>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	2103      	movs	r1, #3
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	43d2      	mvns	r2, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a09      	ldr	r2, [pc, #36]	@ (80002bc <led_init+0x44>)
 8000296:	400b      	ands	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
	gpiod_ptr->MODER |= (0x01 << (pin*2));		/// setting the mode bits as output for the LED
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <led_init+0x44>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	2101      	movs	r1, #1
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <led_init+0x44>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40020c00 	.word	0x40020c00

080002c0 <led_operations>:


void led_operations (uint8_t pin , uint8_t state)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	460a      	mov	r2, r1
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	if(state == TOGGLE)
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d10a      	bne.n	80002ec <led_operations+0x2c>
	{
		gpiod_ptr->ODR ^= (1<<pin);					/// toggling the LED
 80002d6:	4b15      	ldr	r3, [pc, #84]	@ (800032c <led_operations+0x6c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	2101      	movs	r1, #1
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <led_operations+0x6c>)
 80002e6:	404b      	eors	r3, r1
 80002e8:	6153      	str	r3, [r2, #20]
	}
	else
	{
		gpiod_ptr->ODR &= ~(1<<pin);				/// Turn off the LED
	}
}
 80002ea:	e018      	b.n	800031e <led_operations+0x5e>
	else if (state == ON)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10a      	bne.n	8000308 <led_operations+0x48>
		gpiod_ptr->ODR |= (1<<pin);				/// Turn on the LED
 80002f2:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <led_operations+0x6c>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	79fa      	ldrb	r2, [r7, #7]
 80002f8:	2101      	movs	r1, #1
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <led_operations+0x6c>)
 8000302:	430b      	orrs	r3, r1
 8000304:	6153      	str	r3, [r2, #20]
}
 8000306:	e00a      	b.n	800031e <led_operations+0x5e>
		gpiod_ptr->ODR &= ~(1<<pin);				/// Turn off the LED
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <led_operations+0x6c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	79fa      	ldrb	r2, [r7, #7]
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <led_operations+0x6c>)
 800031a:	400b      	ands	r3, r1
 800031c:	6153      	str	r3, [r2, #20]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40020c00 	.word	0x40020c00

08000330 <timer2_init>:
#include <STM32_GPT.h>
#include <stdint.h>


void timer2_init(uint32_t clock_frequency)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	gpt2_ptr->TIMx_PSC = clock_frequency - 1;						/// setting the timer clock frequecy to 1 KHz
 8000338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3b01      	subs	r3, #1
 8000340:	6293      	str	r3, [r2, #40]	@ 0x28
	gpt2_ptr->TIMx_CR1 |= TIMER_ON;										/// Turning on the timer
 8000342:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6013      	str	r3, [r2, #0]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <rcc_init>:

#include <STM32_RCC.h>


void rcc_init (void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	rcc_ptr->AHB1ENR |= SET_GPTIO_CLOCK_ENABLE;					/// enabled the clock for GPIOs
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <rcc_init+0x38>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <rcc_init+0x38>)
 800036a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800036e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
	rcc_ptr->APB1ENR |= SET_TIM2_CLOCK_ENABLE;					/// enabled the clock of TIMER2
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <rcc_init+0x38>)
 8000376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <rcc_init+0x38>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6413      	str	r3, [r2, #64]	@ 0x40
	rcc_ptr->APB2ENR |= SET_SYSTEM_CONFIG_CLOCK_ENABLE;			/// enabled the clock for SYSTEM CONFIG Peripheral
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <rcc_init+0x38>)
 8000382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <rcc_init+0x38>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800038a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003ce:	f7ff ff15 	bl	80001fc <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	2000001c 	.word	0x2000001c

080003ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	@ (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	@ (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	@ (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

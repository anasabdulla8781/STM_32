/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <main.h>
#include <stm32_basic_timer.h>

void clock_init()
{
	/// Clock init
	RCC->AHB1ENR |=SET_GPIOAEN;			/// For switch( wakeup switch )
	RCC->AHB1ENR |=SET_GPIODEN;			/// For the LED to work
	RCC->APB2ENR |=SET_SYSCFGEN;			/// For system config peripheral
	RCC->APB1ENR |= (1 << 4); // Enable TIM6 clock

}

void system_config_init()
{
	SYSCFG->EXTICR1&= CLEAR_EXTI0;		/// Clearing the EXTICR Register for the EXTI0
	SYSCFG->EXTICR1|= SET_EXTI0_PA0;	/// Setting EXTI0 Register in interrupt mode for the PA0
}

//void pin_init()
//{
//	GPIOA->MODER&= CLEAR_MODER0;				/// Clearing the default mode of MODER0 of GPIOA
//	GPIOA->MODER|= SET_MODER0_INPUT;			/// Setting the PA0 pin to input
//	GPIOD->MODER&= CLEAR_MODER12;				/// Clearing the default mode for MODER12 of GPIOD
//	GPIOD->MODER|=	SET_MODER12_OUTPUT;			/// Setting the PD12 to output
//}

void exti_init()
{
	EXTI->IMR&=CLEAR_EXTI0_IMR;
	EXTI->IMR|=SET_EXTI0_IMR;
	EXTI->FTSR&=CLEAR_EXTI0_FTSR;
	EXTI->FTSR|=SET_EXTI0_FTSR;
}

void NVIC_init()
{
	NVIC->ISER[0] |= SET_EXT0_INTERRUPT_ENABLE; // Enable EXTI0 interrupt
	NVIC->ISER[1] |= SET_TIM6_INTERRUPT_ENABLE;
}
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_IRQHandler(void)
{
    if (EXTI->PR & (1 << 0))   // check if EXTI0 triggered
    {
        EXTI->PR |= (1 << 0);  // clear pending bit

        // Simple software debounce
        for(volatile int i=0; i<10000; i++);  // small delay

        // Toggle LED
        GPIOD->ODR ^= (1 << 12);
    }
}

void TIM6_DAC_IRQHandler(void)
{
	if(TIM6->SR.bits.UIF)
	{
		TIM6->SR.bits.UIF = 0;
        for(volatile int i=0; i<10000; i++);  // small delay

        // Toggle LED
        GPIOD->ODR ^= (1 << 12);
	}
}


int main(void)
{
    /* Loop forever */
	clock_init();
	system_config_init();
//	pin_init();
	exti_init();
	NVIC_init();
	tim6_init(&TIM6_INIT_CFG);
	while (1)
	{

	}
}

/*
 * stm32_GPIO.h
 *
 *  Created on: Oct 5, 2025
 *      Author: ANAS
 */

#ifndef STM32_GPIO_H_
#define STM32_GPIO_H_


/* #############################    STRUCTURE FOR GPIO ##############################################*/

typedef struct
{
    volatile uint32_t MODER;    // Mode register                 		(offset 0x00)
    volatile uint32_t OTYPER;   // Output type register           		(offset 0x04)
    volatile uint32_t OSPEEDR;  // Output speed register          		(offset 0x08)
    volatile uint32_t PUPDR;    // Pull-up/pull-down register     		(offset 0x0C)
    volatile uint32_t IDR;      // Input data register            		(offset 0x10)
    volatile uint32_t ODR;      // Output data register           		(offset 0x14)
    volatile uint32_t BSRR;     // Bit set/reset register         		(offset 0x18)
    volatile uint32_t LCKR;     // Configuration lock register    		(offset 0x1C)
    volatile uint32_t AFRL;     // Alternate function low register		(offset 0x20)
    volatile uint32_t AFRH;     // Alternate function high register		(offset 0x24)
}GPIO_TypeDef;


/* #############################    INDIVIDUAL REGISTERS FOR GPIO ###################################*/

/***********************
 * GPIOx_MODER Register
 ***********************/
typedef union
{
    struct
    {
        volatile uint32 MODER0  :2;   /*!< Port x mode bits (0:1)   */
        volatile uint32 MODER1  :2;   /*!< Port x mode bits (2:3)   */
        volatile uint32 MODER2  :2;   /*!< Port x mode bits (4:5)   */
        volatile uint32 MODER3  :2;   /*!< Port x mode bits (6:7)   */
        volatile uint32 MODER4  :2;   /*!< Port x mode bits (8:9)   */
        volatile uint32 MODER5  :2;   /*!< Port x mode bits (10:11) */
        volatile uint32 MODER6  :2;   /*!< Port x mode bits (12:13) */
        volatile uint32 MODER7  :2;   /*!< Port x mode bits (14:15) */
        volatile uint32 MODER8  :2;   /*!< Port x mode bits (16:17) */
        volatile uint32 MODER9  :2;   /*!< Port x mode bits (18:19) */
        volatile uint32 MODER10 :2;   /*!< Port x mode bits (20:21) */
        volatile uint32 MODER11 :2;   /*!< Port x mode bits (22:23) */
        volatile uint32 MODER12 :2;   /*!< Port x mode bits (24:25) */
        volatile uint32 MODER13 :2;   /*!< Port x mode bits (26:27) */
        volatile uint32 MODER14 :2;   /*!< Port x mode bits (28:29) */
        volatile uint32 MODER15 :2;   /*!< Port x mode bits (30:31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} MODE_REG_TYPE;


/***********************
 * GPIOx_OTYPER Register
 ***********************/
typedef union
{
    struct
    {
        volatile uint32 OT0  :1;   /*!< Port x output type bit 0   */
        volatile uint32 OT1  :1;   /*!< Port x output type bit 1   */
        volatile uint32 OT2  :1;   /*!< Port x output type bit 2   */
        volatile uint32 OT3  :1;   /*!< Port x output type bit 3   */
        volatile uint32 OT4  :1;   /*!< Port x output type bit 4   */
        volatile uint32 OT5  :1;   /*!< Port x output type bit 5   */
        volatile uint32 OT6  :1;   /*!< Port x output type bit 6   */
        volatile uint32 OT7  :1;   /*!< Port x output type bit 7   */
        volatile uint32 OT8  :1;   /*!< Port x output type bit 8   */
        volatile uint32 OT9  :1;   /*!< Port x output type bit 9   */
        volatile uint32 OT10 :1;   /*!< Port x output type bit 10  */
        volatile uint32 OT11 :1;   /*!< Port x output type bit 11  */
        volatile uint32 OT12 :1;   /*!< Port x output type bit 12  */
        volatile uint32 OT13 :1;   /*!< Port x output type bit 13  */
        volatile uint32 OT14 :1;   /*!< Port x output type bit 14  */
        volatile uint32 OT15 :1;   /*!< Port x output type bit 15  */
        volatile uint32 RESERVED :16; /*!< Reserved bits (16–31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} OTYPE_REG_TYPE;


/************************
 * GPIOx_OSPEEDR Register
 ************************/
typedef union
{
    struct
    {
        volatile uint32 OSPEEDR0  :2;   /*!< Port x speed configuration bits (0:1)   */
        volatile uint32 OSPEEDR1  :2;   /*!< Port x speed configuration bits (2:3)   */
        volatile uint32 OSPEEDR2  :2;   /*!< Port x speed configuration bits (4:5)   */
        volatile uint32 OSPEEDR3  :2;   /*!< Port x speed configuration bits (6:7)   */
        volatile uint32 OSPEEDR4  :2;   /*!< Port x speed configuration bits (8:9)   */
        volatile uint32 OSPEEDR5  :2;   /*!< Port x speed configuration bits (10:11) */
        volatile uint32 OSPEEDR6  :2;   /*!< Port x speed configuration bits (12:13) */
        volatile uint32 OSPEEDR7  :2;   /*!< Port x speed configuration bits (14:15) */
        volatile uint32 OSPEEDR8  :2;   /*!< Port x speed configuration bits (16:17) */
        volatile uint32 OSPEEDR9  :2;   /*!< Port x speed configuration bits (18:19) */
        volatile uint32 OSPEEDR10 :2;   /*!< Port x speed configuration bits (20:21) */
        volatile uint32 OSPEEDR11 :2;   /*!< Port x speed configuration bits (22:23) */
        volatile uint32 OSPEEDR12 :2;   /*!< Port x speed configuration bits (24:25) */
        volatile uint32 OSPEEDR13 :2;   /*!< Port x speed configuration bits (26:27) */
        volatile uint32 OSPEEDR14 :2;   /*!< Port x speed configuration bits (28:29) */
        volatile uint32 OSPEEDR15 :2;   /*!< Port x speed configuration bits (30:31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} OSPEED_REG_TYPE;


/***********************
 * GPIOx_PUPDR Register
 ***********************/
typedef union
{
    struct
    {
        volatile uint32 PUPDR0  :2;   /*!< Port x pull-up/pull-down bits (0:1)   */
        volatile uint32 PUPDR1  :2;   /*!< Port x pull-up/pull-down bits (2:3)   */
        volatile uint32 PUPDR2  :2;   /*!< Port x pull-up/pull-down bits (4:5)   */
        volatile uint32 PUPDR3  :2;   /*!< Port x pull-up/pull-down bits (6:7)   */
        volatile uint32 PUPDR4  :2;   /*!< Port x pull-up/pull-down bits (8:9)   */
        volatile uint32 PUPDR5  :2;   /*!< Port x pull-up/pull-down bits (10:11) */
        volatile uint32 PUPDR6  :2;   /*!< Port x pull-up/pull-down bits (12:13) */
        volatile uint32 PUPDR7  :2;   /*!< Port x pull-up/pull-down bits (14:15) */
        volatile uint32 PUPDR8  :2;   /*!< Port x pull-up/pull-down bits (16:17) */
        volatile uint32 PUPDR9  :2;   /*!< Port x pull-up/pull-down bits (18:19) */
        volatile uint32 PUPDR10 :2;   /*!< Port x pull-up/pull-down bits (20:21) */
        volatile uint32 PUPDR11 :2;   /*!< Port x pull-up/pull-down bits (22:23) */
        volatile uint32 PUPDR12 :2;   /*!< Port x pull-up/pull-down bits (24:25) */
        volatile uint32 PUPDR13 :2;   /*!< Port x pull-up/pull-down bits (26:27) */
        volatile uint32 PUPDR14 :2;   /*!< Port x pull-up/pull-down bits (28:29) */
        volatile uint32 PUPDR15 :2;   /*!< Port x pull-up/pull-down bits (30:31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} PUPD_REG_TYPE;


/***********************
 * GPIOx_IDR Register
 ***********************/
typedef union
{
    struct
    {
        volatile uint32 IDR0  :1;   /*!< Port input data bit 0  */
        volatile uint32 IDR1  :1;   /*!< Port input data bit 1  */
        volatile uint32 IDR2  :1;   /*!< Port input data bit 2  */
        volatile uint32 IDR3  :1;   /*!< Port input data bit 3  */
        volatile uint32 IDR4  :1;   /*!< Port input data bit 4  */
        volatile uint32 IDR5  :1;   /*!< Port input data bit 5  */
        volatile uint32 IDR6  :1;   /*!< Port input data bit 6  */
        volatile uint32 IDR7  :1;   /*!< Port input data bit 7  */
        volatile uint32 IDR8  :1;   /*!< Port input data bit 8  */
        volatile uint32 IDR9  :1;   /*!< Port input data bit 9  */
        volatile uint32 IDR10 :1;   /*!< Port input data bit 10 */
        volatile uint32 IDR11 :1;   /*!< Port input data bit 11 */
        volatile uint32 IDR12 :1;   /*!< Port input data bit 12 */
        volatile uint32 IDR13 :1;   /*!< Port input data bit 13 */
        volatile uint32 IDR14 :1;   /*!< Port input data bit 14 */
        volatile uint32 IDR15 :1;   /*!< Port input data bit 15 */
        volatile uint32 RESERVED :16; /*!< Reserved bits (16–31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} ID_REG_TYPE;


/***********************
 * GPIOx_ODR Register
 ***********************/
typedef union
{
    struct
    {
        volatile uint32 ODR0  :1;   /*!< Port output data bit 0  */
        volatile uint32 ODR1  :1;   /*!< Port output data bit 1  */
        volatile uint32 ODR2  :1;   /*!< Port output data bit 2  */
        volatile uint32 ODR3  :1;   /*!< Port output data bit 3  */
        volatile uint32 ODR4  :1;   /*!< Port output data bit 4  */
        volatile uint32 ODR5  :1;   /*!< Port output data bit 5  */
        volatile uint32 ODR6  :1;   /*!< Port output data bit 6  */
        volatile uint32 ODR7  :1;   /*!< Port output data bit 7  */
        volatile uint32 ODR8  :1;   /*!< Port output data bit 8  */
        volatile uint32 ODR9  :1;   /*!< Port output data bit 9  */
        volatile uint32 ODR10 :1;   /*!< Port output data bit 10 */
        volatile uint32 ODR11 :1;   /*!< Port output data bit 11 */
        volatile uint32 ODR12 :1;   /*!< Port output data bit 12 */
        volatile uint32 ODR13 :1;   /*!< Port output data bit 13 */
        volatile uint32 ODR14 :1;   /*!< Port output data bit 14 */
        volatile uint32 ODR15 :1;   /*!< Port output data bit 15 */
        volatile uint32 RESERVED :16; /*!< Reserved bits (16–31) */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} OD_REG_TYPE;

/************************
 * GPIOx_BSRR Register
 ************************/
typedef union
{
    struct
    {
        volatile uint32 BS0  :1;  /*!< Set bit for pin 0   */
        volatile uint32 BS1  :1;  /*!< Set bit for pin 1   */
        volatile uint32 BS2  :1;  /*!< Set bit for pin 2   */
        volatile uint32 BS3  :1;  /*!< Set bit for pin 3   */
        volatile uint32 BS4  :1;  /*!< Set bit for pin 4   */
        volatile uint32 BS5  :1;  /*!< Set bit for pin 5   */
        volatile uint32 BS6  :1;  /*!< Set bit for pin 6   */
        volatile uint32 BS7  :1;  /*!< Set bit for pin 7   */
        volatile uint32 BS8  :1;  /*!< Set bit for pin 8   */
        volatile uint32 BS9  :1;  /*!< Set bit for pin 9   */
        volatile uint32 BS10 :1;  /*!< Set bit for pin 10  */
        volatile uint32 BS11 :1;  /*!< Set bit for pin 11  */
        volatile uint32 BS12 :1;  /*!< Set bit for pin 12  */
        volatile uint32 BS13 :1;  /*!< Set bit for pin 13  */
        volatile uint32 BS14 :1;  /*!< Set bit for pin 14  */
        volatile uint32 BS15 :1;  /*!< Set bit for pin 15  */

        volatile uint32 BR0  :1;  /*!< Reset bit for pin 0   */
        volatile uint32 BR1  :1;  /*!< Reset bit for pin 1   */
        volatile uint32 BR2  :1;  /*!< Reset bit for pin 2   */
        volatile uint32 BR3  :1;  /*!< Reset bit for pin 3   */
        volatile uint32 BR4  :1;  /*!< Reset bit for pin 4   */
        volatile uint32 BR5  :1;  /*!< Reset bit for pin 5   */
        volatile uint32 BR6  :1;  /*!< Reset bit for pin 6   */
        volatile uint32 BR7  :1;  /*!< Reset bit for pin 7   */
        volatile uint32 BR8  :1;  /*!< Reset bit for pin 8   */
        volatile uint32 BR9  :1;  /*!< Reset bit for pin 9   */
        volatile uint32 BR10 :1;  /*!< Reset bit for pin 10  */
        volatile uint32 BR11 :1;  /*!< Reset bit for pin 11  */
        volatile uint32 BR12 :1;  /*!< Reset bit for pin 12  */
        volatile uint32 BR13 :1;  /*!< Reset bit for pin 13  */
        volatile uint32 BR14 :1;  /*!< Reset bit for pin 14  */
        volatile uint32 BR15 :1;  /*!< Reset bit for pin 15  */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} BSRR_REG_TYPE;


/************************
 * GPIOx_LCKR Register
 ************************/
typedef union
{
    struct
    {
        volatile uint32 LCK0  :1;  /*!< Lock bit for pin 0   */
        volatile uint32 LCK1  :1;  /*!< Lock bit for pin 1   */
        volatile uint32 LCK2  :1;  /*!< Lock bit for pin 2   */
        volatile uint32 LCK3  :1;  /*!< Lock bit for pin 3   */
        volatile uint32 LCK4  :1;  /*!< Lock bit for pin 4   */
        volatile uint32 LCK5  :1;  /*!< Lock bit for pin 5   */
        volatile uint32 LCK6  :1;  /*!< Lock bit for pin 6   */
        volatile uint32 LCK7  :1;  /*!< Lock bit for pin 7   */
        volatile uint32 LCK8  :1;  /*!< Lock bit for pin 8   */
        volatile uint32 LCK9  :1;  /*!< Lock bit for pin 9   */
        volatile uint32 LCK10 :1;  /*!< Lock bit for pin 10  */
        volatile uint32 LCK11 :1;  /*!< Lock bit for pin 11  */
        volatile uint32 LCK12 :1;  /*!< Lock bit for pin 12  */
        volatile uint32 LCK13 :1;  /*!< Lock bit for pin 13  */
        volatile uint32 LCK14 :1;  /*!< Lock bit for pin 14  */
        volatile uint32 LCK15 :1;  /*!< Lock bit for pin 15  */
        volatile uint32 LCKK  :1;  /*!< Lock key bit          */
        volatile uint32 RES   :15; /*!< Reserved              */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} LCKR_REG_TYPE;


/************************
 * GPIOx_AFRL Register
 ************************/
typedef union
{
    struct
    {
        volatile uint32 AFRL0 :4;  /*!< Alternate function selection for pin 0  */
        volatile uint32 AFRL1 :4;  /*!< Alternate function selection for pin 1  */
        volatile uint32 AFRL2 :4;  /*!< Alternate function selection for pin 2  */
        volatile uint32 AFRL3 :4;  /*!< Alternate function selection for pin 3  */
        volatile uint32 AFRL4 :4;  /*!< Alternate function selection for pin 4  */
        volatile uint32 AFRL5 :4;  /*!< Alternate function selection for pin 5  */
        volatile uint32 AFRL6 :4;  /*!< Alternate function selection for pin 6  */
        volatile uint32 AFRL7 :4;  /*!< Alternate function selection for pin 7  */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} AFRL_REG_TYPE;


/************************
 * GPIOx_AFRH Register
 ************************/
typedef union
{
    struct
    {
        volatile uint32 AFRH8  :4;  /*!< Alternate function selection for pin 8  */
        volatile uint32 AFRH9  :4;  /*!< Alternate function selection for pin 9  */
        volatile uint32 AFRH10 :4;  /*!< Alternate function selection for pin 10 */
        volatile uint32 AFRH11 :4;  /*!< Alternate function selection for pin 11 */
        volatile uint32 AFRH12 :4;  /*!< Alternate function selection for pin 12 */
        volatile uint32 AFRH13 :4;  /*!< Alternate function selection for pin 13 */
        volatile uint32 AFRH14 :4;  /*!< Alternate function selection for pin 14 */
        volatile uint32 AFRH15 :4;  /*!< Alternate function selection for pin 15 */
    } bits;

    volatile uint32 all; /*!< Full 32-bit register access */
} AFRH_REG_TYPE;





#endif /* STM32_GPIO_H_ */

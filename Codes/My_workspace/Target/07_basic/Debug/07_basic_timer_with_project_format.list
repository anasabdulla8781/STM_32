
07_basic_timer_with_project_format.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004e4  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  00002030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004e4  080004e4  00002030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004e4  080004e4  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080004ec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          0000001c  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010f0  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000498  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000035e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000076  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000128a  00000000  00000000  00003716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e8b  00000000  00000000  000049a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004669  00000000  00000000  0000582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009e94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000190  00000000  00000000  00009ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004cc 	.word	0x080004cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080004cc 	.word	0x080004cc

080001c8 <clock_init>:
#include <main.h>
#include <stm32_basic_timer.h>
#include <stm32_gpio.h>

void clock_init()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/// Clock init
	RCC->AHB1ENR |=SET_GPIOAEN;			/// For switch( wakeup switch )
 80001cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <clock_init+0x40>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000208 <clock_init+0x40>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |=SET_GPIODEN;			/// For the LED to work
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <clock_init+0x40>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <clock_init+0x40>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |=SET_SYSCFGEN;			/// For system config peripheral
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <clock_init+0x40>)
 80001e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <clock_init+0x40>)
 80001ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001ee:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB1ENR |= (1 << 4); // Enable TIM6 clock
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <clock_init+0x40>)
 80001f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <clock_init+0x40>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6413      	str	r3, [r2, #64]	@ 0x40

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800

0800020c <system_config_init>:

void system_config_init()
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	SYSCFG->EXTICR1&= CLEAR_EXTI0;		/// Clearing the EXTICR Register for the EXTI0
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <system_config_init+0x24>)
 8000212:	689a      	ldr	r2, [r3, #8]
 8000214:	4906      	ldr	r1, [pc, #24]	@ (8000230 <system_config_init+0x24>)
 8000216:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800021a:	4013      	ands	r3, r2
 800021c:	608b      	str	r3, [r1, #8]
	SYSCFG->EXTICR1|= SET_EXTI0_PA0;	/// Setting EXTI0 Register in interrupt mode for the PA0
 800021e:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <system_config_init+0x24>)
 8000220:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <system_config_init+0x24>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	6093      	str	r3, [r2, #8]
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40013800 	.word	0x40013800

08000234 <exti_init>:

void exti_init()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	EXTI->IMR&=CLEAR_EXTI0_IMR;
 8000238:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <exti_init+0x40>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <exti_init+0x40>)
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
	EXTI->IMR|=SET_EXTI0_IMR;
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <exti_init+0x40>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <exti_init+0x40>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
	EXTI->FTSR&=CLEAR_EXTI0_FTSR;
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <exti_init+0x40>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a07      	ldr	r2, [pc, #28]	@ (8000274 <exti_init+0x40>)
 8000256:	f023 0301 	bic.w	r3, r3, #1
 800025a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR|=SET_EXTI0_FTSR;
 800025c:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <exti_init+0x40>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <exti_init+0x40>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	60d3      	str	r3, [r2, #12]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40013c00 	.word	0x40013c00

08000278 <NVIC_init>:

void NVIC_init()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	NVIC->ISER[0] |= SET_EXT0_INTERRUPT_ENABLE; // Enable EXTI0 interrupt
 800027c:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <NVIC_init+0x28>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a07      	ldr	r2, [pc, #28]	@ (80002a0 <NVIC_init+0x28>)
 8000282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000286:	6013      	str	r3, [r2, #0]
	NVIC->ISER[1] |= SET_TIM6_INTERRUPT_ENABLE;
 8000288:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <NVIC_init+0x28>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <NVIC_init+0x28>)
 800028e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000292:	6053      	str	r3, [r2, #4]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <EXTI0_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_IRQHandler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0))   // check if EXTI0 triggered
 80002aa:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <EXTI0_IRQHandler+0x5c>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d01d      	beq.n	80002f2 <EXTI0_IRQHandler+0x4e>
    {
        EXTI->PR |= (1 << 0);  // clear pending bit
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <EXTI0_IRQHandler+0x5c>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <EXTI0_IRQHandler+0x5c>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6153      	str	r3, [r2, #20]

        // Simple software debounce
        for(volatile int i=0; i<10000; i++);  // small delay
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <EXTI0_IRQHandler+0x2a>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002d4:	4293      	cmp	r3, r2
 80002d6:	ddf7      	ble.n	80002c8 <EXTI0_IRQHandler+0x24>

        // Toggle LED
        GPIOD->ODR.bits.ODR15 ^= 1;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <EXTI0_IRQHandler+0x60>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <EXTI0_IRQHandler+0x60>)
 80002e4:	f083 0301 	eor.w	r3, r3, #1
 80002e8:	b2d9      	uxtb	r1, r3
 80002ea:	6953      	ldr	r3, [r2, #20]
 80002ec:	f361 33cf 	bfi	r3, r1, #15, #1
 80002f0:	6153      	str	r3, [r2, #20]
    }
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40013c00 	.word	0x40013c00
 8000304:	40020c00 	.word	0x40020c00

08000308 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	if(TIM6->SR.bits.UIF)
 800030e:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <TIM6_DAC_IRQHandler+0x5c>)
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d01c      	beq.n	8000356 <TIM6_DAC_IRQHandler+0x4e>
	{
		TIM6->SR.bits.UIF = 0;
 800031c:	4a11      	ldr	r2, [pc, #68]	@ (8000364 <TIM6_DAC_IRQHandler+0x5c>)
 800031e:	6913      	ldr	r3, [r2, #16]
 8000320:	f023 0301 	bic.w	r3, r3, #1
 8000324:	6113      	str	r3, [r2, #16]
        for(volatile int i=0; i<10000; i++);  // small delay
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e002      	b.n	8000332 <TIM6_DAC_IRQHandler+0x2a>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000338:	4293      	cmp	r3, r2
 800033a:	ddf7      	ble.n	800032c <TIM6_DAC_IRQHandler+0x24>

        // Toggle LED
        GPIOD->ODR.bits.ODR14 ^= 1;
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <TIM6_DAC_IRQHandler+0x60>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	4a08      	ldr	r2, [pc, #32]	@ (8000368 <TIM6_DAC_IRQHandler+0x60>)
 8000348:	f083 0301 	eor.w	r3, r3, #1
 800034c:	b2d9      	uxtb	r1, r3
 800034e:	6953      	ldr	r3, [r2, #20]
 8000350:	f361 338e 	bfi	r3, r1, #14, #1
 8000354:	6153      	str	r3, [r2, #20]
	}
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40001000 	.word	0x40001000
 8000368:	40020c00 	.word	0x40020c00

0800036c <main>:


int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
    /* Loop forever */
	clock_init();
 8000370:	f7ff ff2a 	bl	80001c8 <clock_init>
	system_config_init();
 8000374:	f7ff ff4a 	bl	800020c <system_config_init>
	init_config_gpio();
 8000378:	f000 f834 	bl	80003e4 <init_config_gpio>
	exti_init();
 800037c:	f7ff ff5a 	bl	8000234 <exti_init>
	NVIC_init();
 8000380:	f7ff ff7a 	bl	8000278 <NVIC_init>
	tim6_init(&TIM6_INIT_CFG);
 8000384:	4802      	ldr	r0, [pc, #8]	@ (8000390 <main+0x24>)
 8000386:	f000 f805 	bl	8000394 <tim6_init>
	while (1)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <main+0x1e>
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000

08000394 <tim6_init>:
};


/// Copying all the initial configuations to registers
void tim6_init(BASIC_TIM* cfg)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	TIM6->PSC.all = cfg->PSC.all;
 800039c:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <tim6_init+0x4c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003a2:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR.all = cfg->ARR.all;
 80003a4:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <tim6_init+0x4c>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->DIER.all = cfg->DIER.all;
 80003ac:	4a0c      	ldr	r2, [pc, #48]	@ (80003e0 <tim6_init+0x4c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	60d3      	str	r3, [r2, #12]
	TIM6->CR2.all = cfg->CR2.all;
 80003b4:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <tim6_init+0x4c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	6053      	str	r3, [r2, #4]
	TIM6->EGR.bits.UG = 1;
 80003bc:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <tim6_init+0x4c>)
 80003be:	6953      	ldr	r3, [r2, #20]
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6153      	str	r3, [r2, #20]
	TIM6->CR1 = CR1_init_config.all;
 80003c6:	4a06      	ldr	r2, [pc, #24]	@ (80003e0 <tim6_init+0x4c>)
 80003c8:	2300      	movs	r3, #0
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d2:	6013      	str	r3, [r2, #0]

}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40001000 	.word	0x40001000

080003e4 <init_config_gpio>:

/* ################    FILLING THE INITIAL CONFIGURATIONS MEMMAP FOR GPIOA (HW)  ###################*/


void init_config_gpio(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	GPIOA->MODER = init_config_mode_reg_porta.all;
 80003e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000428 <init_config_gpio+0x44>)
 80003ea:	2300      	movs	r3, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	f361 639b 	bfi	r3, r1, #26, #2
 80003f2:	2102      	movs	r1, #2
 80003f4:	f361 731d 	bfi	r3, r1, #28, #2
 80003f8:	2102      	movs	r1, #2
 80003fa:	f361 739f 	bfi	r3, r1, #30, #2
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOD->MODER = init_config_mode_reg_portd.all;
 8000400:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <init_config_gpio+0x48>)
 8000402:	2300      	movs	r3, #0
 8000404:	2101      	movs	r1, #1
 8000406:	f361 6319 	bfi	r3, r1, #24, #2
 800040a:	2101      	movs	r1, #1
 800040c:	f361 639b 	bfi	r3, r1, #26, #2
 8000410:	2101      	movs	r1, #1
 8000412:	f361 731d 	bfi	r3, r1, #28, #2
 8000416:	2101      	movs	r1, #1
 8000418:	f361 739f 	bfi	r3, r1, #30, #2
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40020000 	.word	0x40020000
 800042c:	40020c00 	.word	0x40020c00

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 f811 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000462:	f7ff ff83 	bl	800036c <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000474:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000478:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800047c:	2000004c 	.word	0x2000004c

08000480 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>
	...

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	4d0d      	ldr	r5, [pc, #52]	@ (80004bc <__libc_init_array+0x38>)
 8000488:	4c0d      	ldr	r4, [pc, #52]	@ (80004c0 <__libc_init_array+0x3c>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	2600      	movs	r6, #0
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	4d0b      	ldr	r5, [pc, #44]	@ (80004c4 <__libc_init_array+0x40>)
 8000496:	4c0c      	ldr	r4, [pc, #48]	@ (80004c8 <__libc_init_array+0x44>)
 8000498:	f000 f818 	bl	80004cc <_init>
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	2600      	movs	r6, #0
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr

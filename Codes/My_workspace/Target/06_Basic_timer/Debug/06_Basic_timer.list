
06_Basic_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004bc  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  00002030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004bc  080004bc  00002030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004bc  080004bc  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080004c4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          0000001c  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c21  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000334  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000069  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001118  00000000  00000000  000030c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a62  00000000  00000000  000041d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004300  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00008f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000180  00000000  00000000  00008f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004a4 	.word	0x080004a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080004a4 	.word	0x080004a4

080001c8 <clock_init>:
#include <stdint.h>
#include <main.h>
#include "stm32_basic_timer.h"

void clock_init()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/// Clock init
	RCC->AHB1ENR |=SET_GPIOAEN;			/// For switch( wakeup switch )
 80001cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <clock_init+0x40>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000208 <clock_init+0x40>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |=SET_GPIODEN;			/// For the LED to work
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <clock_init+0x40>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <clock_init+0x40>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |=SET_SYSCFGEN;			/// For system config peripheral
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <clock_init+0x40>)
 80001e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001e8:	4a07      	ldr	r2, [pc, #28]	@ (8000208 <clock_init+0x40>)
 80001ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001ee:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB1ENR |= (1 << 4); // Enable TIM6 clock
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <clock_init+0x40>)
 80001f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <clock_init+0x40>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6413      	str	r3, [r2, #64]	@ 0x40

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800

0800020c <system_config_init>:

void system_config_init()
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	SYSCFG->EXTICR1&= CLEAR_EXTI0;		/// Clearing the EXTICR Register for the EXTI0
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <system_config_init+0x24>)
 8000212:	689a      	ldr	r2, [r3, #8]
 8000214:	4906      	ldr	r1, [pc, #24]	@ (8000230 <system_config_init+0x24>)
 8000216:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800021a:	4013      	ands	r3, r2
 800021c:	608b      	str	r3, [r1, #8]
	SYSCFG->EXTICR1|= SET_EXTI0_PA0;	/// Setting EXTI0 Register in interrupt mode for the PA0
 800021e:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <system_config_init+0x24>)
 8000220:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <system_config_init+0x24>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	6093      	str	r3, [r2, #8]
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40013800 	.word	0x40013800

08000234 <pin_init>:

void pin_init()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	GPIOA->MODER&= CLEAR_MODER0;				/// Clearing the default mode of MODER0 of GPIOA
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <pin_init+0x3c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0c      	ldr	r2, [pc, #48]	@ (8000270 <pin_init+0x3c>)
 800023e:	f023 0303 	bic.w	r3, r3, #3
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|= SET_MODER0_INPUT;			/// Setting the PA0 pin to input
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <pin_init+0x3c>)
 8000246:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <pin_init+0x3c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER&= CLEAR_MODER12;				/// Clearing the default mode for MODER12 of GPIOD
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <pin_init+0x40>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <pin_init+0x40>)
 8000252:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOD->MODER|=	SET_MODER12_OUTPUT;			/// Setting the PD12 to output
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <pin_init+0x40>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a05      	ldr	r2, [pc, #20]	@ (8000274 <pin_init+0x40>)
 800025e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020000 	.word	0x40020000
 8000274:	40020c00 	.word	0x40020c00

08000278 <exti_init>:

void exti_init()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	EXTI->IMR&=CLEAR_EXTI0_IMR;
 800027c:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <exti_init+0x40>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <exti_init+0x40>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]
	EXTI->IMR|=SET_EXTI0_IMR;
 8000288:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <exti_init+0x40>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <exti_init+0x40>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
	EXTI->FTSR&=CLEAR_EXTI0_FTSR;
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <exti_init+0x40>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <exti_init+0x40>)
 800029a:	f023 0301 	bic.w	r3, r3, #1
 800029e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR|=SET_EXTI0_FTSR;
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <exti_init+0x40>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a04      	ldr	r2, [pc, #16]	@ (80002b8 <exti_init+0x40>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	60d3      	str	r3, [r2, #12]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40013c00 	.word	0x40013c00

080002bc <NVIC_init>:

void NVIC_init()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	NVIC->ISER[0] |= SET_EXT0_INTERRUPT_ENABLE; // Enable EXTI0 interrupt
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <NVIC_init+0x28>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <NVIC_init+0x28>)
 80002c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	NVIC->ISER[1] |= SET_TIM6_INTERRUPT_ENABLE;
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <NVIC_init+0x28>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <NVIC_init+0x28>)
 80002d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002d6:	6053      	str	r3, [r2, #4]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <EXTI0_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_IRQHandler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0))   // check if EXTI0 triggered
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <EXTI0_IRQHandler+0x4c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d016      	beq.n	8000328 <EXTI0_IRQHandler+0x40>
    {
        EXTI->PR |= (1 << 0);  // clear pending bit
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <EXTI0_IRQHandler+0x4c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <EXTI0_IRQHandler+0x4c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6153      	str	r3, [r2, #20]

        // Simple software debounce
        for(volatile int i=0; i<10000; i++);  // small delay
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e002      	b.n	8000312 <EXTI0_IRQHandler+0x2a>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000318:	4293      	cmp	r3, r2
 800031a:	ddf7      	ble.n	800030c <EXTI0_IRQHandler+0x24>

        // Toggle LED
        GPIOD->ODR ^= (1 << 12);
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <EXTI0_IRQHandler+0x50>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a05      	ldr	r2, [pc, #20]	@ (8000338 <EXTI0_IRQHandler+0x50>)
 8000322:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000326:	6153      	str	r3, [r2, #20]
    }
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40013c00 	.word	0x40013c00
 8000338:	40020c00 	.word	0x40020c00

0800033c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	if(TIM6->SR.bits.UIF)
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <TIM6_DAC_IRQHandler+0x4c>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b00      	cmp	r3, #0
 800034e:	d015      	beq.n	800037c <TIM6_DAC_IRQHandler+0x40>
	{
		TIM6->SR.bits.UIF = 0;
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <TIM6_DAC_IRQHandler+0x4c>)
 8000352:	6913      	ldr	r3, [r2, #16]
 8000354:	f023 0301 	bic.w	r3, r3, #1
 8000358:	6113      	str	r3, [r2, #16]
        for(volatile int i=0; i<10000; i++);  // small delay
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	e002      	b.n	8000366 <TIM6_DAC_IRQHandler+0x2a>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3301      	adds	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f242 720f 	movw	r2, #9999	@ 0x270f
 800036c:	4293      	cmp	r3, r2
 800036e:	ddf7      	ble.n	8000360 <TIM6_DAC_IRQHandler+0x24>

        // Toggle LED
        GPIOD->ODR ^= (1 << 12);
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <TIM6_DAC_IRQHandler+0x50>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <TIM6_DAC_IRQHandler+0x50>)
 8000376:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800037a:	6153      	str	r3, [r2, #20]
	}
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40001000 	.word	0x40001000
 800038c:	40020c00 	.word	0x40020c00

08000390 <main>:


int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    /* Loop forever */
	clock_init();
 8000394:	f7ff ff18 	bl	80001c8 <clock_init>
	system_config_init();
 8000398:	f7ff ff38 	bl	800020c <system_config_init>
	pin_init();
 800039c:	f7ff ff4a 	bl	8000234 <pin_init>
	exti_init();
 80003a0:	f7ff ff6a 	bl	8000278 <exti_init>
	NVIC_init();
 80003a4:	f7ff ff8a 	bl	80002bc <NVIC_init>
	tim6_init(&TIM6_INIT_CFG);
 80003a8:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <main+0x24>)
 80003aa:	f000 f805 	bl	80003b8 <tim6_init>
	while (1)
 80003ae:	bf00      	nop
 80003b0:	e7fd      	b.n	80003ae <main+0x1e>
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000

080003b8 <tim6_init>:
};


/// Copying all the initial configuations to registers
void tim6_init(BASIC_TIM* cfg)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	TIM6->PSC.all = cfg->PSC.all;
 80003c0:	4a10      	ldr	r2, [pc, #64]	@ (8000404 <tim6_init+0x4c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003c6:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR.all = cfg->ARR.all;
 80003c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <tim6_init+0x4c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->DIER.all = cfg->DIER.all;
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <tim6_init+0x4c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	60d3      	str	r3, [r2, #12]
	TIM6->CR2.all = cfg->CR2.all;
 80003d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <tim6_init+0x4c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	6053      	str	r3, [r2, #4]
	TIM6->EGR.bits.UG = 1;
 80003e0:	4a08      	ldr	r2, [pc, #32]	@ (8000404 <tim6_init+0x4c>)
 80003e2:	6953      	ldr	r3, [r2, #20]
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]
	TIM6->CR1 = CR1_init_config.all;
 80003ea:	4a06      	ldr	r2, [pc, #24]	@ (8000404 <tim6_init+0x4c>)
 80003ec:	2300      	movs	r3, #0
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003f6:	6013      	str	r3, [r2, #0]

}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40001000 	.word	0x40001000

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800043a:	f7ff ffa9 	bl	8000390 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000454:	2000004c 	.word	0x2000004c

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
